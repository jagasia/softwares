package controller;

import java.util.List;

import javax.validation.Valid;

import org.springframework.beans.factory.annotation.Autowired;
import org.springframework.stereotype.Controller;
import org.springframework.validation.BindingResult;
import org.springframework.validation.FieldError;
import org.springframework.web.bind.annotation.ExceptionHandler;
import org.springframework.web.bind.annotation.ModelAttribute;
import org.springframework.web.bind.annotation.RequestMapping;
import org.springframework.web.bind.annotation.RequestMethod;
import org.springframework.web.bind.annotation.RequestParam;
import org.springframework.web.servlet.ModelAndView;

import model.Vehicle;
import model.VehicleService;

@Controller
public class VehicleController {
	@Autowired
	VehicleService vs;
	@RequestMapping("/")
	public ModelAndView home()
	{
		return select(0);
	}
	@RequestMapping(method = RequestMethod.POST, value = "/save", params = "add")
	@ExceptionHandler({NumberFormatException.class, ArithmeticException.class})
	public ModelAndView addVehicle(@Valid @ModelAttribute("vehicle")Vehicle vehicle, BindingResult result)
	{	
		
		  int x=0; 
		  int y=0; 
		  if(x==y) throw new
		  NumberFormatException("This is my arith exception");
		 
//		result.addError(new FieldError("vehicle", "name", "Name is invalid according to my rule"));
		result.addError(new FieldError("vehicle", "name", "This  is jag"));
		if(result.hasErrors())
		{
			System.out.println("Error is there");
			ModelAndView mv=new ModelAndView();
			mv.setViewName("vehicle");			
			List<Vehicle> vehicles = vs.read();
			mv.addObject("vehicles", vehicles);
			return mv;
		}
		System.out.println("No error");
		vehicle.setId(0);
		vs.add(vehicle);
		return home();
	}
	@RequestMapping(method = RequestMethod.POST, value = "/save", params = "update")
	public ModelAndView updateVehicle(@Valid @ModelAttribute("vehicle")Vehicle vehicle, BindingResult result)
	{
		if(result.hasErrors())
		{
			System.out.println("Error is there");
			ModelAndView mv=new ModelAndView();
			mv.setViewName("vehicle");
			List<Vehicle> vehicles = vs.read();
			mv.addObject("vehicles", vehicles);
			return mv;
		}
		System.out.println("No errors");
		vs.update(vehicle);
		return home();
	}
	@RequestMapping(method = RequestMethod.POST, value = "/save", params = "delete")
	public ModelAndView deleteVehicle(@RequestParam("id")int id)
	{
		vs.delete(id);
		return home();
	}
	@RequestMapping("/select")
	public ModelAndView select(@RequestParam("id") int id)
	{
		ModelAndView mv=new ModelAndView();
		List<Vehicle> vehicles = vs.read();
		mv.addObject("vehicles", vehicles);
		
		
		Vehicle vehicle = new Vehicle();
		if(id!=0)
			vehicle=vs.read(id);
		else
			vehicle=vehicles.get(0);
		mv.addObject("vehicle",vehicle);
		
		mv.setViewName("vehicle");
	
		return mv;
	}
}


JSR 303

<dependency>
    <groupId>javax.validation</groupId>
    <artifactId>validation-api</artifactId>
    <version>1.0.0.GA</version>
</dependency>
For validation to actually work, you need an implementation as well, such as Hibernate Validator.

<dependency>
    <groupId>org.hibernate</groupId>
    <artifactId>hibernate-validator</artifactId>
    <version>4.3.1.Final</version>
</dependency>


import java.io.Serializable;
 
import javax.validation.constraints.Pattern;
import javax.validation.constraints.Size;
 
public class EmployeeVO implements Serializable 
{
    private static final long serialVersionUID = 1L;
 
    private Integer id;
     
    @Size(min = 3, max = 20)
    private String firstName;
     
    @Size(min = 3, max = 20)
    private String lastName;
     
    @Pattern(regexp=".+@.+\\.[a-z]+")
    private String email;
 
    //Setters and Getters
 
    @Override
    public String toString() {
        return "EmployeeVO [id=" + id + ", firstName=" + firstName
                + ", lastName=" + lastName + ", email=" + email + "]";
    }
}


@RequestMapping(method = RequestMethod.POST)
public String submitForm(@ModelAttribute("employee") EmployeeVO employeeVO,
        BindingResult result, SessionStatus status) {
 
    Set<ConstraintViolation<EmployeeVO>> violations = validator.validate(employeeVO);
     
    for (ConstraintViolation<EmployeeVO> violation : violations) 
    {
        String propertyPath = violation.getPropertyPath().toString();
        String message = violation.getMessage();
        // Add JSR-303 errors to BindingResult
        // This allows Spring to display them in view via a FieldError
        result.addError(new FieldError("employee",propertyPath,
 
                               "Invalid "+ propertyPath + "(" + message + ")"));
    }
 
    if (result.hasErrors()) {
        return "addEmployee";
    }
    // Store the employee information in database
    // manager.createNewRecord(employeeVO);
 
    // Mark Session Complete
    status.setComplete();
    return "redirect:addNew/success";
}