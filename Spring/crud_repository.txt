	  <dependency>
		 <groupId>org.springframework.boot</groupId>
		 <artifactId>spring-boot-starter-data-jpa</artifactId>
	  </dependency>
	  <dependency>
		 <groupId>mysql</groupId>
		 <artifactId>mysql-connector-java</artifactId>
		 <version>6.0.5</version>
	  </dependency>	  	  	  
	  <dependency>
		 <groupId>javax.xml.bind</groupId>
		 <artifactId>jaxb-api</artifactId>
		 <version>2.3.0</version>
	  </dependency>  	      	  	  	  
          <dependency>
                 <groupId>org.springframework.boot</groupId>
                 <artifactId>spring-boot-devtools</artifactId>
                 <optional>true</optional>
          </dependency>


===========================
public interface ArticleRepository extends CrudRepository<Article, Long>  {
}
============================
Auto-Detection of JPA Repository
Spring boot can automatically detect our repository if the package of that interface is the same or sub-package of the class annotated with @SpringBootApplication and 
if not then we need to use 

@EnableJpaRepositories 

annotation with @SpringBootApplication. Let us understand by example.
Suppose we have a class annotated with @SpringBootApplication in the package com.concretepage as given below.
package com.concretepage;
------
@SpringBootApplication
public class MyApplication {  
------  
}

======

Now if we have a repository ArticleRepository and it resides in package com.concretepage or its sub-packages such as com.concretepage.repository then Spring boot will automatically detect our repository and so no need to use @EnableJpaRepositories annotation.

If we choose a package for our repository that is neither same package nor sub-package of the package of the class annotated with @SpringBootApplication, then Spring boot will not be able to detect repository classes by default. In this case we need to use @EnableJpaRepositories annotation with @SpringBootApplication. Using @EnableJpaRepositories we will configure package name in which our repository classes reside. Suppose the package of our repository classes is com.cp.repository, we will use @EnableJpaRepositories as following.
package com.concretepage;
------
@SpringBootApplication
@EnableJpaRepositories("com.cp.repository")
public class MyApplication {  
------
}If we want to configure specific classes then we need to use basePackageClasses attribute of the @EnableJpaRepositories annotation. Suppose we have a class ArticleRepository in the package com.cp.repository, then we can configure repository using basePackageClasses as following.
package com.concretepage;
-----
import com.cp.repository.ArticleRepository;
@SpringBootApplication
@EnableJpaRepositories(basePackageClasses= {ArticleRepository.class})
public class MyApplication {  
------     
} 
=========================================
=========================================
public class ArticleService {
   @Autowired
   private ArticleRepository articleRepository;
   ------
}
============================================

a. Create and Update:
Article savedArticle = articleRepository.save(article); 
b. Read:
Article obj = articleRepository.findById(articleId).get();
Iterable<Article> articles = articleRepository.findAll(); 
c. Delete:
articleRepository.delete(article); 
=====================================
public interface ArticleRepository extends CrudRepository<Article, Long>  {
    List<Article> findByTitle(String title);
    List<Article> findDistinctByCategory(String category);
    List<Article> findByTitleAndCategory(String title, String category);

    @Query("SELECT a FROM Article a WHERE a.title=:title and a.category=:category")
    List<Article> fetchArticles(@Param("title") String title, @Param("category") String category);
} 
=========================================
public interface ArticleRepository extends CrudRepository<Article, Long>  {
    @Override
    @Transactional(timeout = 8)
    Iterable<Article> findAll();
} 
=======================================
application.properties
----------------------
spring.datasource.url=jdbc:mysql://localhost:3306/concretepage
spring.datasource.username=root
spring.datasource.password=cp

spring.datasource.hikari.connection-timeout=20000
spring.datasource.hikari.minimum-idle=5
spring.datasource.hikari.maximum-pool-size=12
spring.datasource.hikari.idle-timeout=300000
spring.datasource.hikari.max-lifetime=1200000

spring.jpa.properties.hibernate.dialect = org.hibernate.dialect.MySQLDialect
spring.jpa.properties.hibernate.id.new_generator_mappings = false
spring.jpa.properties.hibernate.format_sql = true

logging.level.org.hibernate.SQL=DEBUG
logging.level.org.hibernate.type.descriptor.sql.BasicBinder=TRACE
============================	
